package info.woody.api.intellij.plugin.csct.bean

import static info.woody.api.intellij.plugin.csct.util.RichTextMaker.escapeContent
import static info.woody.api.intellij.plugin.csct.util.RichTextMaker.newHighlight
import static info.woody.api.intellij.plugin.csct.util.RichTextMaker.newLink

/**
 * File detail info.
 *
 * @author Woody
 */
class CodeStyleCheckDetailFileData extends CodeStyleCheckSummaryFileData {
    private static final String LINE_BREAK_TAG = "<br>"
    private static final int PADDING_WIDTH = 5
    private String reportContent = ""
    String authorsKey
    List<CodeStyleCheckGlobalError> globalErrorList = new ArrayList<>()
    List<CodeStyleCheckLineError> lineErrorList = new ArrayList<>()

    /**
     * Constructor.
     *
     * @param fileName The file name.
     * @param filePath The file path.
     * @param authorsKey Unique key generated by authors.
     */
    CodeStyleCheckDetailFileData(String fileName, String filePath, String authorsKey) {
        super(fileName, filePath)
        this.authorsKey = authorsKey
    }

    /**
     * Get the error count for the current file.
     *
     * @return The error count for the current file.
     */
    int getTotalErrorCount() {
        globalErrorList.size() + lineErrorList.size()
    }

    /**
     * Generate file report.
     *
     * @return The formatted report.
     */
    String getReportContent() {
        int totalErrorCount = getTotalErrorCount()
        if (/*!reportContent &&*/ totalErrorCount > 0) {
            StringBuilder reportContentBuilder = new StringBuilder()
            reportContentBuilder.append("${newLink(filePath, filePath, this.fileName)} has ${totalErrorCount} error(s)")
            Closure<StringBuilder> lineBuilder = { reportContentBuilder.append(LINE_BREAK_TAG) }
            globalErrorList.each {
                lineBuilder().append(newHighlight(String.format(it.error, it.args)))
            }
            lineErrorList.each {
                lineBuilder().append(String.valueOf(it.lineNumber).padRight(PADDING_WIDTH)
                        .concat(escapeContent(it.line.trim())).concat(" &lt;= ").concat(newHighlight(String.format(it.error, it.args))))
            }
            reportContent = reportContentBuilder.toString()
        }
        reportContent
    }
}
